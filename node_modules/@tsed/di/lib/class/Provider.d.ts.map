{"version":3,"sources":["class/Provider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAoD,WAAW,EAAE,KAAK,EAAE,IAAI,EAAC,MAAM,YAAY,CAAC;AACvG,OAAO,EAAC,aAAa,EAAC,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAC,SAAS,EAAC,MAAM,yBAAyB,CAAC;AAClD,OAAO,EAAC,YAAY,EAAC,MAAM,4BAA4B,CAAC;AAExD,qBAAa,QAAQ,CAAC,CAAC,CAAE,YAAW,SAAS,CAAC,CAAC,CAAC;IAE9C,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IAG7B,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC;IAGvB,SAAS,CAAC,KAAK,EAAE,YAAY,GAAG,GAAG,CAAyB;IAC5D,SAAS,CAAC,QAAQ,EAAE,WAAW,CAAC;IAEhC,OAAO,CAAC,MAAM,CAAQ;gBAEV,OAAO,EAAE,WAAW;IAMhC;;;OAGG;;;;;IACC,OAAO,EAAI,GAAG;IAYlB;;;OAGG;;;;;IACC,QAAQ,EAAI,IAAI,CAAC,CAAC,CAAC;IAavB;;;OAGG;;;;;IACC,QAAQ,EAAI,CAAC;IAYjB;;;OAGG;;;;;IACC,IAAI,EAAI,GAAG;IAYf;;;OAGG;aACC,SAAS;IAIb;;;OAGG;aACQ,KAAK,EAAI,KAAK;IAIzB;;;OAGG;;;;;IACC,KAAK,EAAI,aAAa;IAY1B,KAAK,IAAI,QAAQ,CAAC,GAAG,CAAC;CAQvB","file":"Provider.d.ts","sourcesContent":["import {getClass, getClassOrSymbol, nameOf, NotEnumerable, RegistryKey, Store, Type} from \"@tsed/core\";\nimport {ProviderScope} from \"../interfaces\";\nimport {IProvider} from \"../interfaces/IProvider\";\nimport {ProviderType} from \"../interfaces/ProviderType\";\n\nexport class Provider<T> implements IProvider<T> {\n  @NotEnumerable()\n  protected _useClass: Type<T>;\n\n  @NotEnumerable()\n  protected _instance: T;\n\n  @NotEnumerable()\n  protected _type: ProviderType | any = ProviderType.PROVIDER;\n  protected _provide: RegistryKey;\n  @NotEnumerable()\n  private _store: Store;\n\n  constructor(provide: RegistryKey) {\n    this._provide = getClassOrSymbol(provide);\n    this._useClass = getClass(this._provide);\n    this._store = Store.from(this._provide);\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  get provide(): any {\n    return this._provide;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set provide(value: any) {\n    this._provide = value;\n  }\n\n  /**\n   *\n   * @returns {Type<T>}\n   */\n  get useClass(): Type<T> {\n    return this._useClass;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set useClass(value: Type<T>) {\n    this._store = Store.from(value);\n    this._useClass = value;\n  }\n\n  /**\n   *\n   * @returns {T}\n   */\n  get instance(): T {\n    return this._instance;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set instance(value: T) {\n    this._instance = value;\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  get type(): any {\n    return this._type;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set type(value: any) {\n    this._type = value;\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get className() {\n    return nameOf(this.provide);\n  }\n\n  /**\n   *\n   * @returns {Store}\n   */\n  public get store(): Store {\n    return this._store;\n  }\n\n  /**\n   * Get the scope of the provider.\n   * @returns {boolean}\n   */\n  get scope(): ProviderScope {\n    return this.store.get(\"scope\");\n  }\n\n  /**\n   * Change the scope value of the provider.\n   * @param scope\n   */\n  set scope(scope: ProviderScope) {\n    this.store.set(\"scope\", scope);\n  }\n\n  clone(): Provider<any> {\n    const provider = new Provider(this._provide);\n    provider._type = this._type;\n    provider.useClass = this._useClass;\n    provider._instance = this._instance;\n\n    return provider;\n  }\n}\n"],"sourceRoot":"../../src"}