{"version":3,"sources":["server/utils/createExpressApplication.ts"],"names":[],"mappings":";;AAAA,mCAAmC;AACnC,mCAA6D;AAG7D,SAAgB,wBAAwB,CAAC,QAAyB;IAChE,MAAM,UAAU,GAAG,OAAO,EAAE,CAAC;IAC7B,MAAM,WAAW,GAAG,UAAU,CAAC,GAAG,CAAC;IAEnC,UAAU,CAAC,GAAG,GAAG,UAAS,GAAG,IAAW;QACtC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACpB,IAAI,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACrB,GAAG,GAAG,oBAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aAChD;YAED,OAAO,GAAG,CAAC;QACb,CAAC,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;IACzC,CAAC,CAAC;IAEF,QAAQ,CAAC,YAAY,CAAC,wBAAkB,EAAE,UAAU,CAAC,CAAC;IAEtD,OAAO,UAAU,CAAC;AACpB,CAAC;AAnBD,4DAmBC","file":"createExpressApplication.js","sourcesContent":["import * as Express from \"express\";\nimport {ExpressApplication, HandlerBuilder} from \"../../mvc\";\nimport {InjectorService} from \"@tsed/common\";\n\nexport function createExpressApplication(injector: InjectorService) {\n  const expressApp = Express();\n  const originalUse = expressApp.use;\n\n  expressApp.use = function(...args: any[]) {\n    args = args.map(arg => {\n      if (injector.has(arg)) {\n        arg = HandlerBuilder.from(arg).build(injector);\n      }\n\n      return arg;\n    });\n\n    return originalUse.call(this, ...args);\n  };\n\n  injector.forkProvider(ExpressApplication, expressApp);\n\n  return expressApp;\n}\n"],"sourceRoot":"../../../src"}