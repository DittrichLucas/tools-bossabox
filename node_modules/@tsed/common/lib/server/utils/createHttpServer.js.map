{"version":3,"sources":["server/utils/createHttpServer.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAE7B,yDAAoD;AACpD,sFAAiF;AAEjF,SAAgB,gBAAgB,CAAC,QAAyB;IACxD,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAqB,uCAAkB,CAAC,CAAC;IACxE,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IACjD,qBAAqB;IACrB,0BAA0B;IACzB,UAAkB,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,UAAU,CAAC;IAE3C,QAAQ,CAAC,YAAY,CAAC,uBAAU,EAAE,UAAU,CAAC,CAAC;IAE9C,OAAO,UAAU,CAAC;AACpB,CAAC;AAVD,4CAUC","file":"createHttpServer.js","sourcesContent":["import * as Http from \"http\";\nimport {InjectorService} from \"@tsed/di\";\nimport {HttpServer} from \"../decorators/httpServer\";\nimport {ExpressApplication} from \"../../mvc/decorators/class/expressApplication\";\n\nexport function createHttpServer(injector: InjectorService): Http.Server {\n  const expressApp = injector.get<ExpressApplication>(ExpressApplication);\n  const httpServer = Http.createServer(expressApp);\n  // TODO to be removed\n  /* istanbul ignore next */\n  (httpServer as any).get = () => httpServer;\n\n  injector.forkProvider(HttpServer, httpServer);\n\n  return httpServer;\n}\n"],"sourceRoot":"../../../src"}