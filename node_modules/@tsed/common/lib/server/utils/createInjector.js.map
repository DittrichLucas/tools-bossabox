{"version":3,"sources":["server/utils/createInjector.ts"],"names":[],"mappings":";;AAAA,iCAAwE;AACxE,uFAAkF;AAElF,SAAgB,cAAc,CAAC,QAAa;IAC1C,MAAM,QAAQ,GAAG,IAAI,oBAAe,EAAE,CAAC;IACvC,QAAQ,CAAC,QAAQ,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC;IACpD,QAAQ,CAAC,MAAM,qBACV,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,CAAC,IAC1B,CAAC,iBAAY,CAAC,UAAU,CAAC,EAAE,QAAQ,CAAC,eAAe,GACpD,CAAC;IAEF,OAAO,QAAQ,CAAC;AAClB,CAAC;AATD,wCASC;AAED,SAAS,qBAAqB,CAAC,QAAyB;IACtD,MAAM,QAAQ,GAAG,oBAAe,CAAC,GAAG,CAAC,6CAAqB,CAAE,CAAC;IAC7D,MAAM,eAAe,GAAG,QAAQ,CAAC,MAAM,CAAwB,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAElF,QAAQ,CAAC,YAAY,CAAC,6CAAqB,EAAE,eAAe,CAAC,CAAC;IAE9D,OAAO,eAAe,CAAC;AACzB,CAAC","file":"createInjector.js","sourcesContent":["import {InjectorService, GlobalProviders, ProviderType} from \"@tsed/di\";\nimport {ServerSettingsService} from \"../../config/services/ServerSettingsService\";\n\nexport function createInjector(settings: any) {\n  const injector = new InjectorService();\n  injector.settings = createSettingsService(injector);\n  injector.scopes = {\n    ...(settings.scopes || {}),\n    [ProviderType.CONTROLLER]: settings.controllerScope\n  };\n\n  return injector;\n}\n\nfunction createSettingsService(injector: InjectorService) {\n  const provider = GlobalProviders.get(ServerSettingsService)!;\n  const settingsService = injector.invoke<ServerSettingsService>(provider.useClass);\n\n  injector.forkProvider(ServerSettingsService, settingsService);\n\n  return settingsService;\n}\n"],"sourceRoot":"../../../src"}