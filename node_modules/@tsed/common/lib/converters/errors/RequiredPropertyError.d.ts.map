{"version":3,"sources":["converters/errors/RequiredPropertyError.ts"],"names":[],"mappings":"AAAA,OAAO,EAAS,IAAI,EAAC,MAAM,YAAY,CAAC;AACxC,OAAO,EAAC,UAAU,EAAC,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAC,cAAc,EAAC,MAAM,qCAAqC,CAAC;AAEnE;;GAEG;AACH,qBAAa,qBAAsB,SAAQ,UAAW,YAAW,cAAc;IAC7E,MAAM,EAAE,GAAG,EAAE,CAAC;gBAEF,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,YAAY,EAAE,MAAM,GAAG,MAAM;IAiB5D;;;;;OAKG;IACH,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,YAAY,EAAE,MAAM,GAAG,MAAM;CAGrE","file":"RequiredPropertyError.d.ts","sourcesContent":["import {nameOf, Type} from \"@tsed/core\";\nimport {BadRequest} from \"ts-httpexceptions\";\nimport {IResponseError} from \"../../mvc/interfaces/IResponseError\";\n\n/**\n * @private\n */\nexport class RequiredPropertyError extends BadRequest implements IResponseError {\n  errors: any[];\n\n  constructor(target: Type<any>, propertyName: string | symbol) {\n    super(RequiredPropertyError.buildMessage(target, propertyName));\n\n    this.errors = [\n      {\n        dataPath: \"\",\n        keyword: \"required\",\n        message: `should have required property '${String(propertyName)}'`,\n        modelName: nameOf(target),\n        params: {\n          missingProperty: propertyName\n        },\n        schemaPath: \"#/required\"\n      }\n    ];\n  }\n\n  /**\n   *\n   * @returns {string}\n   * @param target\n   * @param propertyName\n   */\n  static buildMessage(target: Type<any>, propertyName: string | symbol) {\n    return `Property ${propertyName as string} on class ${nameOf(target)} is required.`;\n  }\n}\n"],"sourceRoot":"../../../src"}