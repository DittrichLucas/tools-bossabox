{"version":3,"sources":["interceptors/registries/InterceptorRegistries.ts"],"names":[],"mappings":"AAAA,OAAO,EAAyB,sBAAsB,EAAkB,MAAM,UAAU,CAAC;AAEzF;;;GAGG;AAEH,eAAO,MAAM,mBAAmB,EAAE,sBAGhC,CAAC;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,eAAO,MAAM,mBAAmB,yCAA6D,CAAC","file":"InterceptorRegistries.d.ts","sourcesContent":["import {Provider, ProviderType, TypedProvidersRegistry, GlobalProviders} from \"@tsed/di\";\n\n/**\n *\n * @type {Registry<Provider<any>, IProvider<any>>}\n */\n// tslint:disable-next-line: variable-name\nexport const InterceptorRegistry: TypedProvidersRegistry = GlobalProviders.createRegistry(ProviderType.INTERCEPTOR, Provider, {\n  injectable: true,\n  buildable: true\n});\n/**\n * Add a new interceptor in the `ProviderRegistry`. This interceptor will be built when `InjectorService` will be loaded.\n *\n * #### Example\n *\n * ```typescript\n * import {registerInterceptor, InjectorService} from \"@tsed/common\";\n *\n * export default class MyInterceptor {\n *     constructor(){}\n *     aroundInvoke() {\n *         return \"test\";\n *     }\n * }\n *\n * registerInterceptor({provide: MyInterceptor});\n * // or\n * registerInterceptor(MyInterceptor);\n *\n * const injector = new InjectorService()\n * injector.load();\n *\n * const myInterceptor = injector.get<MyInterceptor>(MyInterceptor);\n * myInterceptor.aroundInvoke(); // test\n * ```\n *\n * @param provider Provider configuration.\n */\nexport const registerInterceptor = GlobalProviders.createRegisterFn(ProviderType.INTERCEPTOR);\n"],"sourceRoot":"../../../src"}