{"version":3,"sources":["interceptors/decorators/Intercept.ts"],"names":[],"mappings":"AAAA,OAAO,EAAQ,IAAI,EAAC,MAAM,YAAY,CAAC;AAEvC,OAAO,EAAC,YAAY,EAAC,MAAM,4BAA4B,CAAC;AAGxD;;;;;;GAMG;AACH,wBAAgB,SAAS,CAAC,CAAC,SAAS,YAAY,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,GAAG,GAAG,QAAQ,CAY/F","file":"Intercept.d.ts","sourcesContent":["import {Store, Type} from \"@tsed/core\";\nimport {IInjectableProperties} from \"@tsed/di\";\nimport {IInterceptor} from \"../interfaces/IInterceptor\";\nimport {interceptorInvokeFactory} from \"../utils/interceptorInvokeFactory\";\n\n/**\n * Attaches interceptor to method call and executes the before and after methods\n *\n * @param interceptor\n * @param options\n * @decorator\n */\nexport function Intercept<T extends IInterceptor>(interceptor: Type<T>, options?: any): Function {\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    Store.from(target).merge(\"injectableProperties\", {\n      [propertyKey]: {\n        bindingType: \"custom\",\n        propertyKey,\n        onInvoke: interceptorInvokeFactory(propertyKey, interceptor, options)\n      }\n    } as IInjectableProperties);\n\n    return descriptor;\n  };\n}\n"],"sourceRoot":"../../../src"}