{"version":3,"sources":["mvc/decorators/method/status.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,gBAAgB,EAAC,MAAM,mCAAmC,CAAC;AAQnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCG;AACH,wBAAgB,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,GAAE,gBAAqB,YAalE","file":"status.d.ts","sourcesContent":["import {DecoratorParameters, Store} from \"@tsed/core\";\nimport {IResponseOptions} from \"../../interfaces/IResponseOptions\";\nimport {mapReturnedResponse} from \"../../utils/mapReturnedResponse\";\n/**\n * @module common/mvc\n */\n/** */\nimport {UseAfter} from \"./useAfter\";\n\n/**\n * Set the HTTP status for the response. It is a chainable alias of Nodeâ€™s `response.statusCode`.\n *\n * ```typescript\n * @Status(204)\n * async myMethod() {}\n * ```\n *\n * With swagger description:\n *\n * ```typescript\n * @Status(204, {\n *   type: Model\n *   description: \"Description\"\n * })\n * @Header('Content-Type', 'application-json')\n * async myMethod() {\n * }\n * ```\n *\n * This example will produce the swagger responses object:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"404\": {\n *       \"description\": \"Description\",\n *       \"headers\": {\n *          \"Content-Type\": {\n *             \"type\": \"string\"\n *          }\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param code\n * @param options\n * @returns {Function}\n * @decorator\n */\nexport function Status(code: number, options: IResponseOptions = {}) {\n  return Store.decorate((store: Store, parameters: DecoratorParameters) => {\n    store.set(\"statusCode\", code);\n\n    const response = mapReturnedResponse(options);\n    store.merge(\"response\", response);\n    store.merge(\"responses\", {[code]: response});\n\n    return UseAfter((request: any, response: any, next: any) => {\n      response.status(code);\n      next();\n    });\n  });\n}\n"],"sourceRoot":"../../../../src"}