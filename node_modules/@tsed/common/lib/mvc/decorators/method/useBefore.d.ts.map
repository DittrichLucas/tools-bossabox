{"version":3,"sources":["mvc/decorators/method/useBefore.ts"],"names":[],"mappings":"AAGA;;;;;;;;;;;;;;;;;;GAkBG;AACH,wBAAgB,SAAS,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,QAAQ,CAYlD","file":"useBefore.d.ts","sourcesContent":["import {getDecoratorType, Store, Type} from \"@tsed/core\";\nimport {EndpointRegistry} from \"../../registries/EndpointRegistry\";\n\n/**\n * Mounts the specified middleware function or functions at the specified path: the middleware function is executed when\n * the base of the requested path matches `path.\n *\n * ```typescript\n * @Controller('/')\n * @UseBefore(Middleware1)\n * export class Ctrl {\n *\n *    @Get('/')\n *    @UseBefore(Middleware2)\n *    get() { }\n * }\n * ```\n *\n * @returns {function(any, any, any): *}\n * @param args\n * @decorator\n */\nexport function UseBefore(...args: any[]): Function {\n  return <T>(target: Type<any>, targetKey?: string, descriptor?: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> | void => {\n    if (getDecoratorType([target, targetKey, descriptor]) === \"method\") {\n      EndpointRegistry.useBefore(target, targetKey!, args);\n\n      return descriptor;\n    }\n\n    Store.from(target).merge(\"middlewares\", {\n      useBefore: args\n    });\n  };\n}\n"],"sourceRoot":"../../../../src"}