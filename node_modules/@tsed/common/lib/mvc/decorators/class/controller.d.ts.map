{"version":3,"sources":["mvc/decorators/class/controller.ts"],"names":[],"mappings":"AAAA,OAAO,EAAsB,IAAI,EAAC,MAAM,YAAY,CAAC;AACrD,OAAO,EAAC,kBAAkB,EAAC,MAAM,qCAAqC,CAAC;AACvE,OAAO,EAAC,cAAc,EAAC,MAAM,iCAAiC,CAAC;AAG/D;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,wBAAgB,UAAU,CAAC,IAAI,EAAE,cAAc,GAAG,kBAAkB,EAAE,GAAG,YAAY,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,QAAQ,CAU5G","file":"controller.d.ts","sourcesContent":["import {isArrayOrArrayClass, Type} from \"@tsed/core\";\nimport {IControllerOptions} from \"../../interfaces/IControllerOptions\";\nimport {PathParamsType} from \"../../interfaces/PathParamsType\";\nimport {ControllerRegistry, registerController} from \"../../registries/ControllerRegistry\";\n\n/**\n * Declare a new controller with his Rest path. His methods annotated will be collected to build the routing list.\n * This routing listing will be built with the `express.Router` object.\n *\n * ```typescript\n *  @Controller(\"/calendars\")\n *  export provide CalendarCtrl {\n *\n *    @Get(\"/:id\")\n *    public get(\n *      @Request() request: Express.Request,\n *      @Response() response: Express.Response,\n *      @Next() next: Express.NextFunction\n *    ): void {\n *\n *    }\n *  }\n * ```\n *\n * @param path\n * @param dependencies\n * @returns {Function}\n * @decorator\n */\nexport function Controller(path: PathParamsType | IControllerOptions, ...dependencies: Type<any>[]): Function {\n  return (target: any): void => {\n    registerController(target);\n\n    if (typeof path === \"string\" || path instanceof RegExp || isArrayOrArrayClass(path)) {\n      ControllerRegistry.merge(target, {path: path as PathParamsType, dependencies});\n    } else {\n      ControllerRegistry.merge(target, path as any);\n    }\n  };\n}\n"],"sourceRoot":"../../../../src"}