{"version":3,"sources":["mvc/class/ControllerProvider.ts"],"names":[],"mappings":"AAAA,OAAO,EAA0B,IAAI,EAAC,MAAM,YAAY,CAAC;AACzD,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AACnC,OAAO,EAAC,QAAQ,EAAC,MAAM,UAAU,CAAC;AAClC,OAAO,EAAC,eAAe,EAAC,MAAM,yCAAyC,CAAC;AAExE,OAAO,EAAC,sBAAsB,EAAE,kBAAkB,EAAC,MAAM,eAAe,CAAC;AAEzE,OAAO,EAAC,gBAAgB,EAAC,MAAM,oBAAoB,CAAC;AAEpD,MAAM,WAAW,mBAAoB,SAAQ,IAAI,CAAC,GAAG,CAAC;IACpD,WAAW,CAAC,EAAE,kBAAkB,CAAC;CAClC;AAED,qBAAa,kBAAmB,SAAQ,QAAQ,CAAC,GAAG,CAAE,YAAW,kBAAkB;IACjF;;OAEG;IAEH,OAAO,CAAC,KAAK,CAAS;IAEtB;;;;OAIG;IAEH,OAAO,CAAC,aAAa,CAA6B;IAG3C,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC;gBAElB,OAAO,EAAE,GAAG;IAKxB;;;OAGG;;;;;IACC,IAAI,EAAI,MAAM;IAYlB;;;OAGG;aACC,SAAS,EAAI,gBAAgB,EAAE;IAInC;;;OAGG;;;;;IACC,YAAY,EAAI,mBAAmB,EAAE;IAazC;;;OAGG;;;;;IACC,aAAa,EAAI,eAAe;IAIpC;;;OAGG;aACC,MAAM;IAYV;;;OAGG;;;;;IACC,WAAW,EAAI,sBAAsB;IAyBzC;;OAEG;IACI,cAAc,iCAC4E;IAEjG;;OAEG;IACI,cAAc;IAIrB;;;OAGG;IACI,eAAe,IAAI,OAAO;IAIjC;;;OAGG;IACI,SAAS,IAAI,OAAO;IAI3B,KAAK,IAAI,kBAAkB;CAU5B","file":"ControllerProvider.d.ts","sourcesContent":["import {getClass, NotEnumerable, Type} from \"@tsed/core\";\nimport * as Express from \"express\";\nimport {Provider} from \"@tsed/di\";\nimport {IRouterSettings} from \"../../config/interfaces/IServerSettings\";\n\nimport {IControllerMiddlewares, IControllerOptions} from \"../interfaces\";\nimport {EndpointRegistry} from \"../registries/EndpointRegistry\";\nimport {EndpointMetadata} from \"./EndpointMetadata\";\n\nexport interface IChildrenController extends Type<any> {\n  $parentCtrl?: ControllerProvider;\n}\n\nexport class ControllerProvider extends Provider<any> implements IControllerOptions {\n  /**\n   * The path for the controller\n   */\n  @NotEnumerable()\n  private _path: string;\n\n  /**\n   * Controllers that depend to this controller.\n   * @type {Array}\n   * @private\n   */\n  @NotEnumerable()\n  private _dependencies: IChildrenController[] = [];\n\n  @NotEnumerable()\n  public router: Express.Router;\n\n  constructor(provide: any) {\n    super(provide);\n    this.type = \"controller\";\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get path(): string {\n    return this._path;\n  }\n\n  /**\n   * set path\n   * @param value\n   */\n  set path(value: string) {\n    this._path = value;\n  }\n\n  /**\n   *\n   * @returns {Endpoint[]}\n   */\n  get endpoints(): EndpointMetadata[] {\n    return EndpointRegistry.getEndpoints(getClass(this.provide));\n  }\n\n  /**\n   *\n   * @returns {Type<any>[]}\n   */\n  get dependencies(): IChildrenController[] {\n    return this._dependencies;\n  }\n\n  /**\n   *\n   * @param dependencies\n   */\n  set dependencies(dependencies: IChildrenController[]) {\n    this._dependencies = dependencies;\n    this._dependencies.forEach(d => (d.$parentCtrl = this));\n  }\n\n  /**\n   *\n   * @returns {IRouterSettings}\n   */\n  get routerOptions(): IRouterSettings {\n    return this.store.get(\"routerOptions\");\n  }\n\n  /**\n   *\n   * @returns {ControllerProvider}\n   */\n  get parent() {\n    return this.provide.$parentCtrl;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set routerOptions(value: IRouterSettings) {\n    this.store.set(\"routerOptions\", value);\n  }\n\n  /**\n   *\n   * @returns {any[]}\n   */\n  get middlewares(): IControllerMiddlewares {\n    return Object.assign(\n      {\n        use: [],\n        useAfter: [],\n        useBefore: []\n      },\n      this.store.get(\"middlewares\") || {}\n    );\n  }\n\n  /**\n   *\n   * @param middlewares\n   */\n  set middlewares(middlewares: IControllerMiddlewares) {\n    const mdlwrs = this.middlewares;\n    const concat = (key: string, a: any, b: any) => (a[key] = a[key].concat(b[key]));\n\n    Object.keys(middlewares).forEach((key: string) => {\n      concat(key, mdlwrs, middlewares);\n    });\n    this.store.set(\"middlewares\", mdlwrs);\n  }\n\n  /**\n   * Resolve final endpoint url.\n   */\n  public getEndpointUrl = (routerPath: string): string =>\n    (routerPath === this.path ? this.path : (routerPath || \"\") + this.path).replace(/\\/\\//gi, \"/\");\n\n  /**\n   *\n   */\n  public hasEndpointUrl() {\n    return !!this.path;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  public hasDependencies(): boolean {\n    return !!this.dependencies.length;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  public hasParent(): boolean {\n    return !!this.provide.$parentCtrl;\n  }\n\n  clone(): ControllerProvider {\n    const provider = new ControllerProvider(this._provide);\n    provider._type = this._type;\n    provider.useClass = this._useClass;\n    provider._instance = this._instance;\n    provider._path = this._path;\n    provider._dependencies = this._dependencies;\n\n    return provider;\n  }\n}\n"],"sourceRoot":"../../../src"}