{"version":3,"sources":["mvc/class/HandlerMetadata.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,aAAa,EAAC,MAAM,mCAAmC,CAAC;AAKhE,qBAAa,eAAe;IA6Bd,OAAO,CAAC,OAAO;IAAO,OAAO,CAAC,gBAAgB,CAAC;IA5B3D;;OAEG;IAEH,OAAO,CAAC,KAAK,CAAwD;IACrE;;;;OAIG;IAEH,OAAO,CAAC,WAAW,CAAkB;IACrC;;OAEG;IAEH,OAAO,CAAC,WAAW,CAAkB;IACrC;;OAEG;IAEH,OAAO,CAAC,aAAa,CAAU;IAC/B;;OAEG;IAEH,OAAO,CAAC,SAAS,CAAM;gBAEH,OAAO,EAAE,GAAG,EAAU,gBAAgB,CAAC,oBAAQ;IAInE;;OAEG;IACH,OAAO,CAAC,OAAO;aA+BX,IAAI;aAIJ,UAAU,EAAI,OAAO;aAIrB,UAAU,EAAI,OAAO;aAIrB,YAAY,EAAI,OAAO;aAIvB,eAAe,EAAI,MAAM,GAAG,SAAS;aAIrC,MAAM,EAAI,GAAG;aAIb,QAAQ,EAAI,aAAa,EAAE;CAiBhC","file":"HandlerMetadata.d.ts","sourcesContent":["import {NotEnumerable, Store} from \"@tsed/core\";\nimport {ProviderType, ProviderRegistry} from \"@tsed/di\";\nimport {ParamMetadata} from \"../../filters/class/ParamMetadata\";\nimport {EXPRESS_ERR, EXPRESS_NEXT_FN, EXPRESS_REQUEST, EXPRESS_RESPONSE} from \"../../filters/constants\";\nimport {ParamRegistry} from \"../../filters/registries/ParamRegistry\";\nimport {MiddlewareType} from \"../interfaces\";\n\nexport class HandlerMetadata {\n  /**\n   *\n   */\n  @NotEnumerable()\n  private _type: \"function\" | \"middleware\" | \"controller\" = \"function\";\n  /**\n   *\n   * @type {boolean}\n   * @private\n   */\n  @NotEnumerable()\n  private _errorParam: boolean = false;\n  /**\n   *\n   */\n  @NotEnumerable()\n  private _injectable: boolean = false;\n  /**\n   *\n   */\n  @NotEnumerable()\n  private _nextFunction: boolean;\n  /**\n   *\n   */\n  @NotEnumerable()\n  private _useClass: any;\n\n  constructor(private _target: any, private _methodClassName?: string) {\n    this.resolve();\n  }\n\n  /**\n   *\n   */\n  private resolve() {\n    this._useClass = this._target;\n\n    let handler = this._target;\n    let target = this._target;\n\n    if (ProviderRegistry.has(this._target)) {\n      const provider = ProviderRegistry.get(this._target)!;\n      this._type = provider.type;\n\n      if (provider.type === ProviderType.MIDDLEWARE) {\n        this._type = \"middleware\";\n        this._errorParam = Store.from(provider.provide).get(\"middlewareType\") === MiddlewareType.ERROR;\n        this._methodClassName = \"use\";\n        this._useClass = target = provider.useClass;\n      }\n    }\n\n    if (this._methodClassName) {\n      this._injectable = ParamRegistry.isInjectable(target, this._methodClassName);\n      this._nextFunction = ParamRegistry.hasNextFunction(target, this._methodClassName);\n\n      handler = target.prototype[this._methodClassName];\n    }\n\n    if (!this._injectable) {\n      this._errorParam = handler.length === 4;\n      this._nextFunction = handler.length >= 3;\n    }\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get errorParam(): boolean {\n    return this._errorParam;\n  }\n\n  get injectable(): boolean {\n    return this._injectable;\n  }\n\n  get nextFunction(): boolean {\n    return this._nextFunction;\n  }\n\n  get methodClassName(): string | undefined {\n    return this._methodClassName;\n  }\n\n  get target(): any {\n    return this._target;\n  }\n\n  get services(): ParamMetadata[] {\n    if (this.injectable) {\n      return ParamRegistry.getParams(this._useClass, this.methodClassName);\n    }\n\n    const parameters: any[] = [{service: EXPRESS_REQUEST}, {service: EXPRESS_RESPONSE}];\n\n    if (this.errorParam) {\n      parameters.unshift({service: EXPRESS_ERR});\n    }\n\n    if (this.nextFunction) {\n      parameters.push({service: EXPRESS_NEXT_FN});\n    }\n\n    return parameters;\n  }\n}\n"],"sourceRoot":"../../../src"}