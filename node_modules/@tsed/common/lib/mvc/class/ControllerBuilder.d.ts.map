{"version":3,"sources":["mvc/class/ControllerBuilder.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,eAAe,EAAC,MAAM,UAAU,CAAC;AAEzC,OAAO,EAAC,eAAe,EAAC,MAAM,yCAAyC,CAAC;AACxE,OAAO,EAAC,kBAAkB,EAAC,MAAM,sBAAsB,CAAC;AAKxD,qBAAa,iBAAiB;IAChB,OAAO,CAAC,QAAQ;IAAsB,OAAO,CAAC,qBAAqB;gBAA3D,QAAQ,EAAE,kBAAkB,EAAU,qBAAqB,GAAE,eAAoB;IAIrG;;;OAGG;IACH,KAAK,CAAC,QAAQ,EAAE,eAAe,GAAG,IAAI;IA0BtC,OAAO,CAAC,gBAAgB;CAKzB","file":"ControllerBuilder.d.ts","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {InjectorService} from \"@tsed/di\";\nimport * as Express from \"express\";\nimport {IRouterSettings} from \"../../config/interfaces/IServerSettings\";\nimport {ControllerProvider} from \"./ControllerProvider\";\n\nimport {EndpointBuilder} from \"./EndpointBuilder\";\nimport {HandlerBuilder} from \"./HandlerBuilder\";\n\nexport class ControllerBuilder {\n  constructor(private provider: ControllerProvider, private defaultRoutersOptions: IRouterSettings = {}) {\n    this.provider.router = Express.Router(Object.assign({}, defaultRoutersOptions, this.provider.routerOptions));\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  build(injector: InjectorService): this {\n    const ctrl = this.provider;\n    this.buildMiddlewares(injector, this.provider.middlewares.useBefore!);\n\n    ctrl.endpoints.forEach(endpoint => {\n      new EndpointBuilder(endpoint, this.provider.router).build(injector); // this.provider.middlewares.use\n    });\n\n    this.buildMiddlewares(injector, this.provider.middlewares.useAfter!);\n\n    ctrl.dependencies.forEach((child: Type<any>) => {\n      const provider = injector.getProvider(child) as ControllerProvider;\n\n      /* istanbul ignore next */\n      if (!provider) {\n        throw new Error(\"Controller component not found in the ControllerRegistry\");\n      }\n\n      const ctrlBuilder = new ControllerBuilder(provider, this.defaultRoutersOptions).build(injector);\n\n      this.provider.router.use(provider.path, ctrlBuilder.provider.router);\n    });\n\n    return this;\n  }\n\n  private buildMiddlewares(injector: InjectorService, middlewares: any[]) {\n    return middlewares\n      .filter(o => typeof o === \"function\")\n      .forEach((middleware: any) => this.provider.router.use(HandlerBuilder.from(middleware).build(injector)));\n  }\n}\n"],"sourceRoot":"../../../src"}