{"version":3,"sources":["mvc/class/EndpointBuilder.ts"],"names":[],"mappings":"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","file":"EndpointBuilder.js","sourcesContent":["import {applyBefore, nameOf} from \"@tsed/core\";\nimport {InjectorService} from \"@tsed/di\";\nimport {SendResponseMiddleware} from \"../components/SendResponseMiddleware\";\nimport {EndpointMetadata} from \"./EndpointMetadata\";\nimport {HandlerBuilder} from \"./HandlerBuilder\";\n\n/**\n *\n */\nexport class EndpointBuilder {\n  constructor(private endpoint: EndpointMetadata, private router: any) {}\n\n  /**\n   *\n   */\n  private bindRequest(endpoint: EndpointMetadata, debug: boolean) {\n    return (request: any, response: any, next: any) => {\n      /* istanbul ignore else */\n      if (request.id && debug) {\n        request.log.debug({\n          event: \"bind.request\",\n          target: nameOf(endpoint.target),\n          methodClass: endpoint.methodClassName,\n          httpMethod: request.method\n        });\n      }\n\n      request.createContainer();\n      request.setEndpoint(endpoint);\n\n      applyBefore(response, \"end\", () => this.unbindRequest(endpoint, debug, request));\n\n      next();\n    };\n  }\n\n  private unbindRequest(endpoint: EndpointMetadata, debug: boolean, request: any) {\n    /* istanbul ignore next */\n    if (request.id && debug) {\n      request.log.debug({\n        event: \"unbind.request\",\n        target: nameOf(endpoint.target),\n        methodClass: endpoint.methodClassName,\n        httpMethod: request.method\n      });\n    }\n\n    try {\n      request.destroyContainer();\n      request.destroyEndpoint();\n    } catch (error) {\n      request.log.error({\n        error: {\n          message: \"Unable to clean request. \" + error.message,\n          stack: error.stack\n        }\n      });\n    }\n  }\n\n  /**\n   *\n   * @param middlewares\n   */\n  private routeMiddlewares(middlewares: any[]) {\n    this.endpoint.pathsMethods.forEach(({path, method}) => {\n      if (!!method && this.router[method]) {\n        this.router[method](path, ...middlewares);\n      } else {\n        const args: any[] = [path].concat(middlewares);\n        this.router.use(...args);\n      }\n    });\n\n    if (!this.endpoint.pathsMethods.length) {\n      this.router.use(...middlewares);\n    }\n  }\n\n  /**\n   *\n   * @returns {any[]}\n   * @param injector\n   */\n  build(injector: InjectorService) {\n    const endpoint = this.endpoint;\n    const debug = injector.settings.debug;\n\n    let middlewares: any = []\n      .concat(endpoint.beforeMiddlewares as any)\n      .concat(endpoint.middlewares as any)\n      .concat([endpoint] as any)\n      .concat(endpoint.afterMiddlewares as any)\n      .concat(SendResponseMiddleware as any)\n      .filter((item: any) => !!item)\n      .map((middleware: any) => HandlerBuilder.from(middleware).build(injector));\n\n    middlewares = [this.bindRequest(endpoint, debug)].concat(middlewares);\n\n    this.routeMiddlewares(middlewares);\n\n    return middlewares;\n  }\n}\n"],"sourceRoot":"../../../src"}