{"version":3,"sources":["mvc/registries/ControllerRegistry.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAgC,MAAM,UAAU,CAAC;AAK/E,eAAO,MAAM,kBAAkB,EAAE,sBAS/B,CAAC;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,eAAO,MAAM,kBAAkB,yCAAwD,CAAC","file":"ControllerRegistry.d.ts","sourcesContent":["import {TypedProvidersRegistry, ProviderType, GlobalProviders} from \"@tsed/di\";\nimport {ControllerProvider} from \"../class/ControllerProvider\";\nimport {ExpressRouter} from \"../services/ExpressRouter\";\n\n// tslint:disable-next-line: variable-name\nexport const ControllerRegistry: TypedProvidersRegistry = GlobalProviders.createRegistry(ProviderType.CONTROLLER, ControllerProvider, {\n  injectable: false,\n  buildable: true,\n\n  onInvoke(provider: ControllerProvider, locals, designParamTypes) {\n    if (!locals.has(ExpressRouter)) {\n      locals.set(ExpressRouter, provider.router);\n    }\n  }\n});\n/**\n * Add a new controller in the `ProviderRegistry`. This controller will be built when `InjectorService` will be loaded.\n *\n * #### Example\n *\n * ```typescript\n * import {registerController, InjectorService} from \"@tsed/common\";\n *\n * export default class MyController {\n *     constructor(){}\n *     transform() {\n *         return \"test\";\n *     }\n * }\n *\n * registerController({provide: MyController});\n * // or\n * registerController(MyController);\n *\n * const injector = new InjectorService();\n * injector.load();\n *\n * const myController = injector.get<MyController>(MyController);\n * myController.getFoo(); // test\n * ```\n *\n * @param provider Provider configuration.\n */\nexport const registerController = GlobalProviders.createRegisterFn(ProviderType.FILTER);\n"],"sourceRoot":"../../../src"}