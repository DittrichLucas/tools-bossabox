{"version":3,"sources":["mvc/registries/MiddlewareRegistry.ts"],"names":[],"mappings":"AACA,OAAO,EAAW,sBAAsB,EAAE,SAAS,EAAgC,MAAM,UAAU,CAAC;AAGpG;;;GAGG;AAEH,eAAO,MAAM,kBAAkB,EAAE,sBAG/B,CAAC;AAIH;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,wBAAgB,kBAAkB,CAAC,QAAQ,EAAE,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,EAAE,GAAG,QAKhF;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,wBAAgB,uBAAuB,CAAC,QAAQ,EAAE,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,EAAE,GAAG,QAKrF","file":"MiddlewareRegistry.d.ts","sourcesContent":["import {getClassOrSymbol} from \"@tsed/core\";\nimport {Provider, TypedProvidersRegistry, IProvider, ProviderType, GlobalProviders} from \"@tsed/di\";\nimport {MiddlewareType} from \"../interfaces/MiddlewareType\";\n\n/**\n *\n * @type {Registry<Provider<any>, Provider>}\n */\n// tslint:disable-next-line: variable-name\nexport const MiddlewareRegistry: TypedProvidersRegistry = GlobalProviders.createRegistry(ProviderType.MIDDLEWARE, Provider, {\n  injectable: true,\n  buildable: true\n});\n\nconst middlewareRegisterFn = GlobalProviders.createRegisterFn(ProviderType.MIDDLEWARE);\n\n/**\n * Add a new middleware in the `ProviderRegistry`. This middleware will be built when `InjectorService` will be loaded.\n *\n * #### Example\n *\n * ```typescript\n * import {registerMiddleware, InjectorService} from \"@tsed/common\";\n *\n * export default class FooMiddleware {\n *     constructor(){}\n *     use() {\n *         return \"test\";\n *     }\n * }\n *\n * registerMiddleware({provide: FooMiddleware});\n * // or\n * registerMiddleware(FooMiddleware);\n *\n * const injector = new InjectorService()\n * injector.load();\n *\n * const myFooService = injector.get<FooMiddleware>(FooMiddleware);\n * fooMiddleware.use(); // test\n * ```\n *\n * @param provider Provider configuration.\n */\nexport function registerMiddleware(provider: any | IProvider<any>, instance?: any) {\n  middlewareRegisterFn(provider, instance);\n  GlobalProviders.getRegistry(ProviderType.MIDDLEWARE)!\n    .get(getClassOrSymbol(provider.provide || provider))!\n    .store.set(\"middlewareType\", MiddlewareType.MIDDLEWARE);\n}\n\n/**\n * Add a new middleware in the `ProviderRegistry`. This middleware will be built when `InjectorService` will be loaded.\n *\n * #### Example\n *\n * ```typescript\n * import {registerMiddlewareError, InjectorService} from \"@tsed/common\";\n *\n * export default class FooMiddleware {\n *     constructor(){}\n *     use() {\n *         return \"test\";\n *     }\n * }\n *\n * registerMiddlewareError({provide: MyFooService});\n * // or\n * registerMiddlewareError(MyFooService);\n *\n * const injector = new InjectorService();\n * injector.load();\n *\n * const fooMiddleware = injector.get<FooMiddleware>(FooMiddleware);\n * fooMiddleware.use(); // test\n * ```\n *\n * @param provider Provider configuration.\n */\nexport function registerMiddlewareError(provider: any | IProvider<any>, instance?: any) {\n  middlewareRegisterFn(provider, instance);\n  GlobalProviders.getRegistry(ProviderType.MIDDLEWARE)!\n    .get(getClassOrSymbol(provider.provide || provider))!\n    .store.set(\"middlewareType\", MiddlewareType.ERROR);\n}\n"],"sourceRoot":"../../../src"}