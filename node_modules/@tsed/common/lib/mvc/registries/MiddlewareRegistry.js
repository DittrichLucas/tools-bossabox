"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
const MiddlewareType_1 = require("../interfaces/MiddlewareType");
/**
 *
 * @type {Registry<Provider<any>, Provider>}
 */
// tslint:disable-next-line: variable-name
exports.MiddlewareRegistry = di_1.GlobalProviders.createRegistry(di_1.ProviderType.MIDDLEWARE, di_1.Provider, {
    injectable: true,
    buildable: true
});
const middlewareRegisterFn = di_1.GlobalProviders.createRegisterFn(di_1.ProviderType.MIDDLEWARE);
/**
 * Add a new middleware in the `ProviderRegistry`. This middleware will be built when `InjectorService` will be loaded.
 *
 * #### Example
 *
 * ```typescript
 * import {registerMiddleware, InjectorService} from "@tsed/common";
 *
 * export default class FooMiddleware {
 *     constructor(){}
 *     use() {
 *         return "test";
 *     }
 * }
 *
 * registerMiddleware({provide: FooMiddleware});
 * // or
 * registerMiddleware(FooMiddleware);
 *
 * const injector = new InjectorService()
 * injector.load();
 *
 * const myFooService = injector.get<FooMiddleware>(FooMiddleware);
 * fooMiddleware.use(); // test
 * ```
 *
 * @param provider Provider configuration.
 */
function registerMiddleware(provider, instance) {
    middlewareRegisterFn(provider, instance);
    di_1.GlobalProviders.getRegistry(di_1.ProviderType.MIDDLEWARE)
        .get(core_1.getClassOrSymbol(provider.provide || provider))
        .store.set("middlewareType", MiddlewareType_1.MiddlewareType.MIDDLEWARE);
}
exports.registerMiddleware = registerMiddleware;
/**
 * Add a new middleware in the `ProviderRegistry`. This middleware will be built when `InjectorService` will be loaded.
 *
 * #### Example
 *
 * ```typescript
 * import {registerMiddlewareError, InjectorService} from "@tsed/common";
 *
 * export default class FooMiddleware {
 *     constructor(){}
 *     use() {
 *         return "test";
 *     }
 * }
 *
 * registerMiddlewareError({provide: MyFooService});
 * // or
 * registerMiddlewareError(MyFooService);
 *
 * const injector = new InjectorService();
 * injector.load();
 *
 * const fooMiddleware = injector.get<FooMiddleware>(FooMiddleware);
 * fooMiddleware.use(); // test
 * ```
 *
 * @param provider Provider configuration.
 */
function registerMiddlewareError(provider, instance) {
    middlewareRegisterFn(provider, instance);
    di_1.GlobalProviders.getRegistry(di_1.ProviderType.MIDDLEWARE)
        .get(core_1.getClassOrSymbol(provider.provide || provider))
        .store.set("middlewareType", MiddlewareType_1.MiddlewareType.ERROR);
}
exports.registerMiddlewareError = registerMiddlewareError;

//# sourceMappingURL=MiddlewareRegistry.js.map
