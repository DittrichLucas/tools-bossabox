{"version":3,"sources":["mvc/components/GlobalErrorHandlerMiddleware.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AAEnC,OAAO,EAAC,qBAAqB,EAAC,MAAM,cAAc,CAAC;AAKnD,OAAO,EAAC,gBAAgB,EAAC,MAAM,eAAe,CAAC;AAC/C,OAAO,EAAC,cAAc,EAAC,MAAM,8BAA8B,CAAC;AAE5D;;GAEG;AACH,qBACa,4BAA6B,YAAW,gBAAgB;IACnE,OAAO,CAAC,UAAU,CAAS;gBAEf,qBAAqB,EAAE,qBAAqB;IAKxD,GAAG,CAAQ,KAAK,EAAE,GAAG,EAAa,OAAO,EAAE,OAAO,CAAC,OAAO,EAAc,QAAQ,EAAE,OAAO,CAAC,QAAQ,GAAG,GAAG;IA0CxG;;;;OAIG;IACH,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,GAAG,IAAI,EAAE,cAAc,EAAE;CAiBjE","file":"GlobalErrorHandlerMiddleware.d.ts","sourcesContent":["import * as Express from \"express\";\nimport {Exception} from \"ts-httpexceptions\";\nimport {ServerSettingsService} from \"../../config\";\nimport {Err} from \"../../filters/decorators/error\";\nimport {Request} from \"../../filters/decorators/request\";\nimport {Response} from \"../../filters/decorators/response\";\nimport {MiddlewareError} from \"../decorators/class/middlewareError\";\nimport {IMiddlewareError} from \"../interfaces\";\nimport {IResponseError} from \"../interfaces/IResponseError\";\n\n/**\n * @middleware\n */\n@MiddlewareError()\nexport class GlobalErrorHandlerMiddleware implements IMiddlewareError {\n  private headerName: string;\n\n  constructor(settingsServerService: ServerSettingsService) {\n    const {headerName = \"errors\"} = settingsServerService.errors;\n    this.headerName = headerName;\n  }\n\n  use(@Err() error: any, @Request() request: Express.Request, @Response() response: Express.Response): any {\n    const toHTML = (message = \"\") => message.replace(/\\n/gi, \"<br />\");\n\n    if (error instanceof Exception || error.status) {\n      request.log.error({\n        error: {\n          message: error.message,\n          stack: error.stack,\n          status: error.status,\n          origin: error.origin\n        }\n      });\n\n      this.setHeaders(response, error, error.origin);\n\n      response.status(error.status).send(toHTML(error.message));\n\n      return;\n    }\n\n    if (typeof error === \"string\") {\n      response.status(404).send(toHTML(error));\n\n      return;\n    }\n\n    request.log.error({\n      error: {\n        status: 500,\n        message: error.message,\n        stack: error.stack,\n        origin: error.origin\n      }\n    });\n\n    this.setHeaders(response, error, error.origin);\n\n    response.status(error.status || 500).send(\"Internal Error\");\n\n    return;\n  }\n\n  /**\n   *\n   * @param {e.Response} response\n   * @param args\n   */\n  setHeaders(response: Express.Response, ...args: IResponseError[]) {\n    let hErrors: any = [];\n\n    args.filter(o => !!o).forEach(({headers, errors}: IResponseError) => {\n      if (headers) {\n        response.set(headers);\n      }\n\n      if (errors) {\n        hErrors = hErrors.concat(errors);\n      }\n    });\n\n    if (hErrors.length) {\n      response.set(this.headerName, JSON.stringify(hErrors));\n    }\n  }\n}\n"],"sourceRoot":"../../../src"}