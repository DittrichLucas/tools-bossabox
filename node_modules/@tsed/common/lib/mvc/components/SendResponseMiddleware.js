"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Express = require("express");
const ConverterService_1 = require("../../converters/services/ConverterService");
const filters_1 = require("../../filters");
const response_1 = require("../../filters/decorators/response");
const responseData_1 = require("../../filters/decorators/responseData");
const EndpointMetadata_1 = require("../class/EndpointMetadata");
const middleware_1 = require("../decorators/class/middleware");
let SendResponseMiddleware = class SendResponseMiddleware {
    constructor(converterService) {
        this.converterService = converterService;
    }
    use(data, response, endpoint) {
        const type = typeof data;
        if (endpoint.statusCode === 204) {
            response.send();
            return;
        }
        if (data === undefined) {
            return;
        }
        if (data === null || ["number", "boolean", "string"].indexOf(type) > -1) {
            response.send(data && String(data));
            return;
        }
        response.json(this.converterService.serialize(data));
    }
};
tslib_1.__decorate([
    tslib_1.__param(0, responseData_1.ResponseData()), tslib_1.__param(1, response_1.Response()), tslib_1.__param(2, filters_1.EndpointInfo()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, EndpointMetadata_1.EndpointMetadata]),
    tslib_1.__metadata("design:returntype", void 0)
], SendResponseMiddleware.prototype, "use", null);
SendResponseMiddleware = tslib_1.__decorate([
    middleware_1.Middleware(),
    tslib_1.__metadata("design:paramtypes", [ConverterService_1.ConverterService])
], SendResponseMiddleware);
exports.SendResponseMiddleware = SendResponseMiddleware;

//# sourceMappingURL=SendResponseMiddleware.js.map
