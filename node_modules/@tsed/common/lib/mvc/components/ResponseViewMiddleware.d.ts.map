{"version":3,"sources":["mvc/components/ResponseViewMiddleware.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AACnC,OAAO,EAAC,gBAAgB,EAAC,MAAM,2BAA2B,CAAC;AAM3D,OAAO,EAAC,WAAW,EAAC,MAAM,eAAe,CAAC;AAE1C;;;GAGG;AACH,qBACa,sBAAuB,YAAW,WAAW;IACjD,GAAG,CAAiB,IAAI,EAAE,GAAG,EAAkB,QAAQ,EAAE,gBAAgB,EAAc,QAAQ,EAAE,OAAO,CAAC,QAAQ;CAuBzH","file":"ResponseViewMiddleware.d.ts","sourcesContent":["import * as Express from \"express\";\nimport {EndpointMetadata} from \"../class/EndpointMetadata\";\nimport {Middleware} from \"../decorators/class/middleware\";\nimport {EndpointInfo} from \"../../filters/decorators/endpointInfo\";\nimport {Response} from \"../../filters/decorators/response\";\nimport {ResponseData} from \"../../filters/decorators/responseData\";\nimport {TemplateRenderingError} from \"../errors/TemplateRenderingError\";\nimport {IMiddleware} from \"../interfaces\";\n\n/**\n * @private\n * @middleware\n */\n@Middleware()\nexport class ResponseViewMiddleware implements IMiddleware {\n  public use(@ResponseData() data: any, @EndpointInfo() endpoint: EndpointMetadata, @Response() response: Express.Response) {\n    return new Promise((resolve, reject) => {\n      const {viewPath, viewOptions} = endpoint.store.get(ResponseViewMiddleware);\n\n      if (viewPath !== undefined) {\n        if (viewOptions !== undefined) {\n          data = Object.assign({}, data, viewOptions);\n        }\n\n        response.render(viewPath, data, (err: any, html) => {\n          /* istanbul ignore next */\n          if (err) {\n            reject(new TemplateRenderingError(endpoint.target, endpoint.methodClassName, err));\n          } else {\n            // request.storeData(html);\n            resolve(html);\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n}\n"],"sourceRoot":"../../../src"}