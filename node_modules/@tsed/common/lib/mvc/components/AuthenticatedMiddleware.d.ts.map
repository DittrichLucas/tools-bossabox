{"version":3,"sources":["mvc/components/AuthenticatedMiddleware.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AAEnC,OAAO,EAAC,WAAW,EAAC,MAAM,KAAK,CAAC;AAIhC,OAAO,EAAC,gBAAgB,EAAC,MAAM,2BAA2B,CAAC;AAG3D;;;;GAIG;AACH,qBACa,uBAAwB,YAAW,WAAW;IAClD,GAAG,CAAiB,QAAQ,EAAE,gBAAgB,EAAa,OAAO,EAAE,OAAO,CAAC,OAAO,EAAU,IAAI,EAAE,OAAO,CAAC,YAAY;CAc/H","file":"AuthenticatedMiddleware.d.ts","sourcesContent":["import * as Express from \"express\";\nimport {Forbidden} from \"ts-httpexceptions\";\nimport {IMiddleware} from \"../\";\nimport {EndpointInfo} from \"../../filters/decorators/endpointInfo\";\nimport {Next} from \"../../filters/decorators/next\";\nimport {Request} from \"../../filters/decorators/request\";\nimport {EndpointMetadata} from \"../class/EndpointMetadata\";\nimport {Middleware} from \"../decorators/class/middleware\";\n\n/**\n * This middleware manage the authentication.\n * @private\n * @middleware\n */\n@Middleware()\nexport class AuthenticatedMiddleware implements IMiddleware {\n  public use(@EndpointInfo() endpoint: EndpointMetadata, @Request() request: Express.Request, @Next() next: Express.NextFunction) {\n    // const options = endpoint.get(AuthenticatedMiddleware) || {};\n    const isAuthenticated = (request as any).isAuthenticated;\n\n    if (typeof isAuthenticated === \"function\") {\n      if (!isAuthenticated()) {\n        next(new Forbidden(\"Forbidden\"));\n\n        return;\n      }\n    }\n\n    next();\n  }\n}\n"],"sourceRoot":"../../../src"}