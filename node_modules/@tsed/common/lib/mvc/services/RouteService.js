"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
const ts_log_debug_1 = require("ts-log-debug");
const colorizeUtils_1 = require("ts-log-debug/lib/layouts/utils/colorizeUtils");
const ParamRegistry_1 = require("../../filters/registries/ParamRegistry");
/**
 * `RouteService` is used to provide all routes collected by annotation `@ControllerProvider`.
 */
let RouteService = class RouteService {
    constructor(injectorService) {
        this.injectorService = injectorService;
        this._routes = [];
    }
    /**
     *
     * @returns {{route: string; provider: any}[]}
     */
    get routes() {
        return this._routes || [];
    }
    /**
     *
     */
    $afterRoutesInit() {
        if (!this.disableRoutesSummary) {
            ts_log_debug_1.$log.info("Routes mounted :");
            this.printRoutes(ts_log_debug_1.$log);
        }
    }
    /**
     *
     * @returns {number}
     * @param route
     */
    addRoute(route) {
        return this._routes.push(route);
    }
    /**
     * Get all routes built by TsExpressDecorators and mounted on Express application.
     * @returns {IControllerRoute[]}
     */
    getRoutes() {
        const routes = [];
        this.routes.forEach((config) => {
            this.buildRoutes(routes, config.provider, config.route);
        });
        return routes;
    }
    /**
     * Print all route mounted in express via Annotation.
     */
    printRoutes(logger = ts_log_debug_1.$log) {
        const mapColor = {
            GET: "green",
            POST: "yellow",
            PUT: "blue",
            DELETE: "red",
            PATCH: "magenta",
            ALL: "cyan"
        };
        const routes = this.getRoutes().map(route => {
            const method = route.method.toUpperCase();
            route.method = {
                length: method.length,
                toString: () => {
                    return colorizeUtils_1.colorize(method, mapColor[method]);
                }
            };
            return route;
        });
        const str = ts_log_debug_1.$log.drawTable(routes, {
            padding: 1,
            header: {
                method: "Method",
                url: "Endpoint",
                name: "Class method"
            }
        });
        logger.info("\n" + str.trim());
    }
    /**
     * Return all Routes stored in ControllerProvider manager.
     * @returns {IControllerRoute[]}
     */
    getAll() {
        return this.getRoutes();
    }
    /**
     *
     * @param routes
     * @param ctrl
     * @param endpointUrl
     */
    buildRoutes(routes, ctrl, endpointUrl) {
        // console.log("Build routes =>", ctrl.className, endpointUrl);
        ctrl.dependencies
            .map(ctrl => this.injectorService.getProvider(ctrl))
            .forEach((provider) => this.buildRoutes(routes, provider, `${endpointUrl}${provider.path}`));
        ctrl.endpoints.forEach((endpoint) => {
            endpoint.pathsMethods.forEach(({ path, method }) => {
                if (!!method) {
                    const className = core_1.nameOf(ctrl.provide), methodClassName = endpoint.methodClassName, parameters = ParamRegistry_1.ParamRegistry.getParams(ctrl.provide, endpoint.methodClassName);
                    routes.push({
                        method,
                        name: `${className}.${methodClassName}()`,
                        url: `${endpointUrl}${path || ""}`.replace(/\/\//gi, "/"),
                        className,
                        methodClassName,
                        parameters
                    });
                }
            });
        });
    }
};
tslib_1.__decorate([
    di_1.Constant("logger.disableRoutesSummary", false),
    tslib_1.__metadata("design:type", Boolean)
], RouteService.prototype, "disableRoutesSummary", void 0);
RouteService = tslib_1.__decorate([
    di_1.Service(),
    tslib_1.__metadata("design:paramtypes", [di_1.InjectorService])
], RouteService);
exports.RouteService = RouteService;

//# sourceMappingURL=RouteService.js.map
