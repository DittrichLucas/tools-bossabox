/**
 * Get the provide constructor.
 * @param targetClass
 */
export declare const getConstructor: (targetClass: any) => Function;
/**
 * Get the provide constructor if target is an instance.
 * @param target
 * @returns {*}
 */
export declare function getClass(target: any): any;
/**
 * Get the provide constructor if target is an instance.
 * @param target
 * @returns {*}
 * @alias getClass
 */
export declare function classOf(target: any): any;
/**
 *
 * @param target
 * @returns {symbol}
 */
export declare function getClassOrSymbol(target: any): any;
/**
 *
 * @param target
 * @returns {"string" | "number" | "boolean" | "any"}
 */
export declare function primitiveOf(target: any): "string" | "number" | "boolean" | "any";
/**
 *
 * @param target
 */
export declare function isSymbol(target: any): boolean;
/**
 *
 * @param target
 * @returns {boolean}
 */
export declare function isString(target: any): boolean;
/**
 *
 * @param target
 * @returns {boolean}
 */
export declare function isNumber(target: any): boolean;
/**
 *
 * @param target
 * @returns {boolean}
 */
export declare function isBoolean(target: any): boolean;
/**
 * Return true if the given obj is a primitive.
 * @param target
 * @returns {boolean}
 */
export declare function isPrimitiveOrPrimitiveClass(target: any): boolean;
export declare function isPrimitive(target: any): boolean;
/**
 *
 * @param target
 * @returns {Boolean}
 */
export declare function isArray(target: any): boolean;
/**
 * Return true if the clazz is an array.
 * @param target
 * @returns {boolean}
 */
export declare function isArrayOrArrayClass(target: any): boolean;
/**
 * Return true if the target.
 * @param target
 * @returns {boolean}
 */
export declare function isCollection(target: any): boolean;
/**
 *
 * @param target
 * @returns {boolean}
 */
export declare function isDate(target: any): boolean;
/**
 *
 * @param target
 * @returns {boolean}
 */
export declare function isClassObject(target: any): boolean;
export declare function isObject(target: any): boolean;
/**
 *
 * @param target
 * @returns {boolean}
 */
export declare function isClass(target: any): boolean;
export declare function isFunction(target: any): boolean;
export declare function isArrowFn(target: any): boolean;
/**
 *
 * @param value
 */
export declare function isNil(value: any): boolean;
/**
 * Return true if the value is an empty string, null or undefined.
 * @param value
 * @returns {boolean}
 */
export declare function isEmpty(value: any): boolean;
/**
 *
 * @param target
 * @returns {boolean}
 */
export declare function isPromise(target: any): boolean;
/**
 *
 * @param target
 * @returns {any}
 */
export declare function getInheritedClass(target: any): any;
/**
 *
 * @param target
 * @returns {Array}
 */
export declare function ancestorsOf(target: any): any[];
/**
 * Get object name
 */
export declare function nameOf(obj: any): string;
/**
 * Get the provide name.
 * @param targetClass
 */
export declare function nameOfClass(targetClass: any): string;
/**
 * Get symbol name.
 * @param sym
 */
export declare const nameOfSymbol: (sym: symbol) => string;
/**
 *
 * @param target
 * @param {string} propertyKey
 * @returns {PropertyDescriptor}
 */
export declare function descriptorOf(target: any, propertyKey: string): PropertyDescriptor;
/**
 *
 * @param target
 * @returns {any}
 */
export declare function prototypeOf(target: any): any;
